package model;

/**
 *
 * @author Fernando Mu√±iz Fernandez
 * IBE, Institute of Evolutionary Biology (UPF-CSIC)
 * CEXS-UPF-PRBB
 */

import database.DbManager;
import global.ServiceLocator;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class Operation {

    private int operationId = Integer.MIN_VALUE;     //INTEGER generated by default as identity
    private String opFriendlyName = ""; //VARCHAR(255) NOT NULL
    private String opNetCDFName = "";   //VARCHAR(255) NOT NULL
    private String opType = "";         //VARCHAR(32) NOT NULL
    private int parentMatrixId = Integer.MIN_VALUE;    //INTEGER
    private int parentOperationId = Integer.MIN_VALUE;    //INTEGER
    private String opCommand = "";     //VARCHAR(2000)
    private String description = "";        //VARCHAR(255)
    private int studyId = Integer.MIN_VALUE;    //INTEGER


    //This will init the Matrix object requested from the DB
    public Operation(int _operationId) throws IOException{
        List<Map<String, Object>> rs = getOperationMetadata(_operationId);
        operationId = _operationId;

        //PREVENT PHANTOM-DB READS EXCEPTIONS
        if (!rs.isEmpty() && rs.get(0).size()==constants.cDBOperations.T_CREATE_OPERATIONS.length) {
            opFriendlyName = (rs.get(0).get(constants.cDBOperations.f_OP_NAME) != null) ? rs.get(0).get(constants.cDBOperations.f_OP_NAME).toString() : "";
            opNetCDFName = (rs.get(0).get(constants.cDBOperations.f_OP_NETCDF_NAME) != null) ? rs.get(0).get(constants.cDBOperations.f_OP_NETCDF_NAME).toString() : "";
            opType = (rs.get(0).get(constants.cDBOperations.f_OP_TYPE) != null) ? rs.get(0).get(constants.cDBOperations.f_OP_TYPE).toString() : "";
            parentMatrixId = (rs.get(0).get(constants.cDBOperations.f_PARENT_MATRIXID) != null) ? Integer.parseInt(rs.get(0).get(constants.cDBOperations.f_PARENT_MATRIXID).toString()) : -1;
            parentOperationId = (rs.get(0).get(constants.cDBOperations.f_PARENT_OPID) != null) ? Integer.parseInt(rs.get(0).get(constants.cDBOperations.f_PARENT_OPID).toString()) : -1;
            opCommand = (rs.get(0).get(constants.cDBOperations.f_OP_COMMAND) != null) ? rs.get(0).get(constants.cDBOperations.f_OP_COMMAND).toString() : "";
            description = (rs.get(0).get(constants.cDBOperations.f_DESCRIPTION) != null) ? rs.get(0).get(constants.cDBOperations.f_DESCRIPTION).toString() : "";
            studyId = (rs.get(0).get(constants.cDBOperations.f_STUDYID) != null) ? Integer.parseInt(rs.get(0).get(constants.cDBOperations.f_STUDYID).toString()) : 0;
        }
    }


    public int getOperationId(){
        return operationId;
    }

    public int getParentMatrixId(){
        return parentMatrixId;
    }

    public int getStudyId(){
        return studyId;
    }

    public String getOperationFriendlyName(){
        return opFriendlyName;
    }

    public String getOperationNetCDFName(){
        return opNetCDFName;
    }

    public String getOperationType(){
        return opType;
    }

    public String getOperationCommand(){
        return opCommand;
    }

    public String getDescription(){
        return description;
    }

    public int getParentOperationId() {
        return parentOperationId;
    }



    public static List<Map<String, Object>> getOperationMetadata(int opId) throws IOException{
            List<Map<String, Object>> rs = null;
            String dbName = constants.cDBGWASpi.DB_DATACENTER;
            DbManager studyDbManager = ServiceLocator.getDbManager(dbName);
            try {
                rs = studyDbManager.executeSelectStatement("SELECT * FROM "+constants.cDBGWASpi.SCH_MATRICES+"."+constants.cDBOperations.T_OPERATIONS+" WHERE "+constants.cDBOperations.f_ID+"="+opId+"  WITH RR");
            } catch (Exception e) {
                e.printStackTrace();
            }

            return rs;
    }
}
