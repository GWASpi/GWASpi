package org.gwaspi.model;

import org.gwaspi.constants.cDBGWASpi;
import org.gwaspi.constants.cDBOperations;
import org.gwaspi.database.DbManager;
import org.gwaspi.global.ServiceLocator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Fernando Mu√±iz Fernandez
 * IBE, Institute of Evolutionary Biology (UPF-CSIC)
 * CEXS-UPF-PRBB
 */
public class Operation {

	private static final Logger log
			= LoggerFactory.getLogger(Operation.class);

	private int id = Integer.MIN_VALUE; // INTEGER generated by default as identity
	private String friendlyName = ""; // VARCHAR(255) NOT NULL
	private String netCDFName = ""; // VARCHAR(255) NOT NULL
	private String type = ""; // VARCHAR(32) NOT NULL
	private int parentMatrixId = Integer.MIN_VALUE; // INTEGER
	private int parentOperationId = Integer.MIN_VALUE; // INTEGER
	private String command = ""; // VARCHAR(2000)
	private String description = ""; // VARCHAR(255)
	private int studyId = Integer.MIN_VALUE; // INTEGER

	/**
	 * This will init the Matrix object requested from the DB
	 */
	public Operation(int _operationId) throws IOException {
		List<Map<String, Object>> rs = getOperationMetadata(_operationId);
		id = _operationId;

		// PREVENT PHANTOM-DB READS EXCEPTIONS
		if (!rs.isEmpty() && rs.get(0).size() == cDBOperations.T_CREATE_OPERATIONS.length) {
			friendlyName = (rs.get(0).get(cDBOperations.f_OP_NAME) != null) ? rs.get(0).get(cDBOperations.f_OP_NAME).toString() : "";
			netCDFName = (rs.get(0).get(cDBOperations.f_OP_NETCDF_NAME) != null) ? rs.get(0).get(cDBOperations.f_OP_NETCDF_NAME).toString() : "";
			type = (rs.get(0).get(cDBOperations.f_OP_TYPE) != null) ? rs.get(0).get(cDBOperations.f_OP_TYPE).toString() : "";
			parentMatrixId = (rs.get(0).get(cDBOperations.f_PARENT_MATRIXID) != null) ? Integer.parseInt(rs.get(0).get(cDBOperations.f_PARENT_MATRIXID).toString()) : -1;
			parentOperationId = (rs.get(0).get(cDBOperations.f_PARENT_OPID) != null) ? Integer.parseInt(rs.get(0).get(cDBOperations.f_PARENT_OPID).toString()) : -1;
			command = (rs.get(0).get(cDBOperations.f_OP_COMMAND) != null) ? rs.get(0).get(cDBOperations.f_OP_COMMAND).toString() : "";
			description = (rs.get(0).get(cDBOperations.f_DESCRIPTION) != null) ? rs.get(0).get(cDBOperations.f_DESCRIPTION).toString() : "";
			studyId = (rs.get(0).get(cDBOperations.f_STUDYID) != null) ? Integer.parseInt(rs.get(0).get(cDBOperations.f_STUDYID).toString()) : 0;
		}
	}

	public int getId() {
		return id;
	}

	public int getParentMatrixId() {
		return parentMatrixId;
	}

	public int getStudyId() {
		return studyId;
	}

	public String getFriendlyName() {
		return friendlyName;
	}

	public String getNetCDFName() {
		return netCDFName;
	}

	public String getOperationType() {
		return type;
	}

	public String getCommand() {
		return command;
	}

	public String getDescription() {
		return description;
	}

	public int getParentOperationId() {
		return parentOperationId;
	}

	private static List<Map<String, Object>> getOperationMetadata(int opId) throws IOException {
		List<Map<String, Object>> rs = null;
		String dbName = cDBGWASpi.DB_DATACENTER;
		DbManager studyDbManager = ServiceLocator.getDbManager(dbName);
		try {
			rs = studyDbManager.executeSelectStatement("SELECT * FROM " + cDBGWASpi.SCH_MATRICES + "." + cDBOperations.T_OPERATIONS + " WHERE " + cDBOperations.f_ID + "=" + opId + "  WITH RR");
		} catch (Exception ex) {
			log.error(null, ex);
		}

		return rs;
	}
}
